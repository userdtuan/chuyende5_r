ggplot(data = df.pie_tinh, aes(x = reorder(name, -name), y = value
,text = after_stat(paste(
"Tỉnh: ", df.pie_tinh[x,1],
"<br>Count: ", df.pie_tinh[x,2]
)))) +
geom_bar(stat = 'identity',fill = "cornflowerblue", color = "black") +
labs(
title = "Số thí sinh phân bố theo tỉnh",
x = "Tỉnh",
y = "Số thí sinh"
) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
ggplotly(tooltip = "text")
})
output$tb_phan_bo_theo_tinh <- DT::renderDataTable(
DT::datatable(
rownames = FALSE,
colnames = c("Tên tỉnh", "Số lượng"),
filter = 'top',
options = list(
pageLength = 10, autoWidth = TRUE
),
data <- df.pie_tinh
)
)
tb.ngoai_ngu <- table(kq_thpt_fixed[names(kq_thpt_fixed)=="Ma_ngoai_ngu"])
df.ngoai_ngu <- as.data.frame(tb.ngoai_ngu)
colnames(df.ngoai_ngu) <- c('name','value')
df.ngoai_ngu <- subset(df.ngoai_ngu,name!='none' )
output$tb_phan_bo_theo_ngoai_ngu <- DT::renderDataTable(
DT::datatable(
rownames = FALSE,
colnames = c("Ngoại ngữ", "Số lượng"),
filter = 'top',
options = list(
pageLength = 10, autoWidth = TRUE
),
data <- df.ngoai_ngu
)
)
output$pie_ngoaingu <- renderPieChart(data = df.ngoai_ngu, div_id = "ngoai_ngu")
df.khoithi <- tu_nhien_vs_xa_hoi(kq_thpt_fixed)
output$tb_tnxh <- DT::renderDataTable(
DT::datatable(
rownames = FALSE,
colnames = c("Khối thi", "Số lượng"),
filter = 'top',
options = list(
pageLength = 10, autoWidth = TRUE
),
data <- df.khoithi
)
)
name <- c('Tự nhiên','Xã hội')
value <- c(df.khoithi[1,1], df.khoithi[1,2])
output$pie_khoithi <- renderPieChart(data = data.frame(name,value), div_id = "pie_khoithi")
#---
# reactiveMon <- reactiveValues()
# reactiveMon$a <- 'Toan'
# aes(
#   x = .data[[input$bo]],
#   text = after_stat(paste(
#     "Category: ", categories()[x],
#     "<br>Count: ", count
#   ))
# )
tb_pho_diem <- reactive( {pho_diem(kq_thpt_fixed,input$mon)} )
output$pho_diem <- renderPlotly({
ggplot(data = tb_pho_diem(), aes(x = reorder(name, -name), y = value,
text = after_stat(paste(
"Grade: ", tb_pho_diem()[x,1],
"<br>Count: ", tb_pho_diem()[x,2]
)))) +
geom_bar(stat = 'identity', fill = "cornflowerblue", color = "black") +
labs(
title = "Số thí sinh phân bố theo môn ",
x = "Điểm ",
y = "Số lượng"
) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
ggplotly(tooltip = "text")
})
})
shinyApp(ui = ui, server = server)
source('functions/helper.R')
library(shiny)
library(shiny.semantic)
library(semantic.dashboard)
library(DT)
library(knitr)
library(dplyr)
library(ECharts2Shiny)
library(plotly)
kq_thpt_raw <- read.csv("datasets/diemthi2020.csv")[,c('sbd','Li','Hoa','Sinh','Su','Dia','GDCD','Toan','Van', 'Ngoai_ngu', 'Ma_mon_ngoai_ngu')]
list_tinh <- read.csv("datasets/listtinh.csv")
movies <- read.csv("datasets/movie_metadata.csv")[, c('movie_title', 'director_name', "budget","gross","country", "title_year", "imdb_score", "num_voted_users","color")
]
movies <- na.omit(movies)
numericData = c("budget","gross","title_year", "budget", "imdb_score", "num_voted_users")
kq_thpt_fixed <- handle_missing(kq_thpt_raw,-1)
kq_thpt_fixed <- gan_ten_tinh(kq_thpt_fixed,list_tinh)[,c('sbd','Li','Hoa','Sinh','Su','Dia','GDCD','Toan','Van', 'Ngoai_ngu', 'Ma_ngoai_ngu', 'Ten.Tinh')]
############################################################################################################################################
# UI
sidebar <- dashboardSidebar(side = "left", size = "thin", color = "teal",
sidebarMenu(
menuItem(text = "Phổ điểm",
tabName = "pho_diem",
icon = icon("info circle")),
menuItem(text = "Thống kê",
tabName = "histogram",
icon = icon("chart bar")),
menuItem(text = "Dữ liệu đã xử lý",
tabName = "fixed_data",
icon = icon("table")),
menuItem(text = "Dữ liệu thô",
tabName = "raw_datasets",
icon = icon("table")),
menuItem(text = "Regression",
tabName = "regression",
icon = icon("chart line"))
# menuItem(text = "General",
#          tabName = "general",
#          icon = icon("info circle")),
# menuItem(text = "Info",
#          tabName = "info",
#          icon = icon("info circle")),
# menuItem(text = "Film database",
#          tabName = "database",
#          icon = icon("bars")),
# menuItem(text = "Histogram",
#          tabName = "hist",
#          icon = icon("chart bar")),
# menuItem(text = "Clustering",
#          tabName = "clustering",
#          icon = icon("asterisk")),
# menuItem(text = "Demo",
#          tabName = "demo",
#          icon = icon("chart line")),
# menuItem(text = "Raw Dataset",
#          tabName = "dataset_raw",
#          icon = icon("table"))
))
source('tabs/tab_pho_diem.R')
source('tabs/tab_info.R')
source('tabs/tab_raw_datasets.R')
source('tabs/tab_database.R')
source('tabs/tab_hist.R')
source('tabs/tab_clustering.R')
source('tabs/tab_regression.R')
source('tabs/tab_demo.R')
source('tabs/tab_dataset_raw.R')
source('tabs/tab_general.R')
source('tabs/tab_fixed_data.R')
source('tabs/tab_pie_chart.R')
source('tabs/tab_histogram.R')
body <- dashboardBody(
tabItems(
tab_pho_diem,
tab_histogram,
tab_fixed_data,
tab_raw_datasets,
tab_regression
# tab_pie_chart,
# dataset_raw,
# tab_info,
# tab_database,
# tab_hist,
# tab_clustering,
# tab_demo,
# tab_general
)
)
ui <- dashboardPage(
theme = "spacelab",
header = dashboardHeader(color = "blue"),
sidebar = sidebar,
body = body
)
server <- shinyServer(function(input, output) {
# Regresja
output$regression_summary <- renderPrint({
fit <- lm(movies[, input$ycol2] ~ movies[, input$xcol2])
names(fit$coefficients) <- c("Intercept", input$var2)
summary(fit)
})
selectedData3 <- reactive({
movies[, c(input$xcol2, input$ycol2)]
})
output$scatterplot <- renderPlot({
plot(selectedData3(),
main = "Regression",
xlab = input$xcol2,
ylab = input$ycol2,
pch = 19)
abline(lm(movies[, input$ycol2] ~ movies[, input$xcol2]), col = "red")
lines(lowess(movies[, input$xcol2], movies[, input$ycol2]), col = "blue")
})
#Raw dataset
output$data_rawTable <- DT::renderDataTable(
DT::datatable(
rownames = FALSE,
colnames = c("SBD", "Ly", "Hoa", "Sinh",
"Dia", "Su", "GDCD",
"Toan", "Van", "Ngoai Ngu", "Ma Mon Ngoai Ngu"),
filter = 'top',
options = list(
pageLength = 12, autoWidth = TRUE
),
data <- kq_thpt_raw
)
)
output$tinhTable <- DT::renderDataTable(
DT::datatable(
rownames = FALSE,
colnames = c("STT", "Ma Tinh", "Ten Tinh"),
filter = 'top',
options = list(
pageLength = 12, autoWidth = TRUE
),
data <- list_tinh
)
)
# c('sbd','Li','Hoa','Sinh','Su','Dia','GDCD','Toan','Van', 'Ngoai_ngu', 'Ma_ngoai_ngu', 'Ten.Tinh')]
output$fixedData <- DT::renderDataTable(
DT::datatable(
rownames = FALSE,
colnames = c("SBD", "Ly", "Hoa", "Sinh",
"Dia", "Su", "GDCD",
"Toan", "Van", "Ngoai Ngu", "Mon Ngoai Ngu", "Tinh"),
filter = 'top',
options = list(
pageLength = 12, autoWidth = TRUE
),
data <- kq_thpt_fixed
)
)
#----
tb.tinh <- table(kq_thpt_fixed[names(kq_thpt_fixed)=="Ten.Tinh"])
df.pie_tinh <- as.data.frame(tb.tinh)
colnames(df.pie_tinh) <- c('name','value')
output$phan_bo_theo_tinh <- renderPlotly({
ggplot(data = df.pie_tinh, aes(x = reorder(name, -name), y = value
,text = after_stat(paste(
"Tỉnh: ", df.pie_tinh[x,1],
"<br>Count: ", df.pie_tinh[x,2]
)))) +
geom_bar(stat = 'identity',fill = "cornflowerblue", color = "black") +
labs(
title = "Số thí sinh phân bố theo tỉnh",
x = "Tỉnh",
y = "Số thí sinh"
) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
ggplotly(tooltip = "text")
})
output$tb_phan_bo_theo_tinh <- DT::renderDataTable(
DT::datatable(
rownames = FALSE,
colnames = c("Tên tỉnh", "Số lượng"),
filter = 'top',
options = list(
pageLength = 10, autoWidth = TRUE
),
data <- df.pie_tinh
)
)
tb.ngoai_ngu <- table(kq_thpt_fixed[names(kq_thpt_fixed)=="Ma_ngoai_ngu"])
df.ngoai_ngu <- as.data.frame(tb.ngoai_ngu)
colnames(df.ngoai_ngu) <- c('name','value')
df.ngoai_ngu <- subset(df.ngoai_ngu,name!='none' )
output$tb_phan_bo_theo_ngoai_ngu <- DT::renderDataTable(
DT::datatable(
rownames = FALSE,
colnames = c("Ngoại ngữ", "Số lượng"),
filter = 'top',
options = list(
pageLength = 10, autoWidth = TRUE
),
data <- df.ngoai_ngu
)
)
output$pie_ngoaingu <- renderPieChart(data = df.ngoai_ngu, div_id = "ngoai_ngu")
df.khoithi <- tu_nhien_vs_xa_hoi(kq_thpt_fixed)
output$tb_tnxh <- DT::renderDataTable(
DT::datatable(
rownames = FALSE,
colnames = c("Khối thi", "Số lượng"),
filter = 'top',
options = list(
pageLength = 10, autoWidth = TRUE
),
data <- df.khoithi
)
)
name <- c('Tự nhiên','Xã hội')
value <- c(df.khoithi[1,1], df.khoithi[1,2])
output$pie_khoithi <- renderPieChart(data = data.frame(name,value), div_id = "pie_khoithi")
#---
tb_pho_diem <- reactive( {pho_diem(kq_thpt_fixed,input$mon)} )
output$pho_diem <- renderPlotly({
ggplot(data = tb_pho_diem(), aes(x = reorder(name, -name), y = value,
text = after_stat(paste(
"Grade: ", tb_pho_diem()[x,1],
"<br>Count: ", tb_pho_diem()[x,2]
)))) +
geom_bar(stat = 'identity', fill = "cornflowerblue", color = "black") +
labs(
title = "Số thí sinh phân bố theo môn ",
x = "Điểm ",
y = "Số lượng"
) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
ggplotly(tooltip = "text")
})
})
shinyApp(ui = ui, server = server)
library(dplyr)
link.diemthi <- "datasets/diemthi2020.csv"
link.dstinh <- "datasets/listtinh.csv"
######## Function Island
xet_vku_theo_tinh<-function(df.raw){
#tao data frame moi co
df <- data.frame(So.Luong=double(),
Ma.Tinh = character())
}
##Ham nay dung de suy ra cac thi sinh du dieu kien xet tuyen vao truong VKU voi diem san va khong co mon nao trong to hop mon duoi diem liet
xet_vku_cntt <- function(df.raw, diemsan = 18.5,diemliet=1) {
##Tao bang df.xet_vku
df.xet_vku <- df.raw
# Tao cac cot to hop mon va gan gia tri mac dinh la -1
df.xet_vku['A00'] <- -1
df.xet_vku['A01'] <- -1
df.xet_vku['D01'] <- -1
#Gan gia tri cho to hop A00 co tong 3 mon la toan-li-hoa neu cot khoi thi la "TN"
df.xet_vku$A00 <-
ifelse(df.xet_vku$Khoi.Thi == "TN",
df.xet_vku$Toan + df.xet_vku$Li + df.xet_vku$Hoa,-1)
#Gan gia tri cho to hop A01 co tong 3 mon la toan-li-tienganh neu cot khoi thi la "TN" va ma ngoai ngu la "N1"
df.xet_vku$A01 <-
ifelse(
df.xet_vku$Khoi.Thi == "TN" & df.xet_vku$Ma_mon_ngoai_ngu=="N1",
df.xet_vku$Toan + df.xet_vku$Li + df.xet_vku$Ngoai_ngu,-1
)
#Gan gia tri cho to hop D01 co tong 3 mon la toan-Van-tienganh
df.xet_vku$D01 <-
df.xet_vku$Toan + df.xet_vku$Van + df.xet_vku$Ngoai_ngu
#Tao cot Bi Liet de xet xem thi sinh do co mon nao bi diem liet khong
df.xet_vku['Bi.Liet'] <- NA
#Gan gia tri cho cot Bi.Liet theo tung khoi thi, neu khoi thi tu nhien thi xet 3 mon ly-hoa-sinh >-1, khoi thi xa hoi tuong ung
df.xet_vku$Bi.Liet <-
ifelse(((
df.xet_vku$Khoi.Thi == "TN" &
df.xet_vku$Sinh > diemliet &
df.xet_vku$Hoa > diemliet &
df.xet_vku$Li > diemliet
) |
(
df.xet_vku$Khoi.Thi == "XH" &
df.xet_vku$Su > diemliet &
df.xet_vku$Dia > diemliet &
df.xet_vku$GDCD > diemliet
)
) &
(
df.xet_vku$Toan > diemliet &
df.xet_vku$Van > diemliet &
df.xet_vku$Ngoai_ngu > diemliet
) ,
FALSE,
TRUE)
df.xet_vku['Trung.Tuyen.VKU'] <- NA
df.xet_vku$Trung.Tuyen.VKU <- ifelse(df.xet_vku$A00>=diemsan|df.xet_vku$A01>=diemsan|df.xet_vku$D01>=diemsan & df.xet_vku$Bi.Liet!=TRUE,TRUE,FALSE)
return(df.xet_vku)
}
pho_diem_ngoai_ngu <- function(df.raw) {
#Tao bang tb.pho_diem_ngoai_ngu voi cac gia tri diem ngoai ngu
tb.pho_diem_ngoai_ngu <- table(df.raw[names(df.raw) == "Ngoai_ngu"])
#Chuyen kieu du lieu table sang data frame
df.pho_diem_ngoai_ngu = as.data.frame(tb.pho_diem_ngoai_ngu)
#Tao cot 'percentage' trong bang "df.pho_diem_ngoai_ngu" voi cac gia tri bang -1
df.pho_diem_ngoai_ngu[, 'percentage'] <- -1
#Duyet tat ca cac gia tri diem trong bang
for (i in 1:nrow(df.pho_diem_ngoai_ngu)) {
#gan diem ngoai ngu o cot so 2 chia cho tong so hang roi nhan 100 de tinh ti so phan tram
c = (df.pho_diem_ngoai_ngu[, 2][i] / nrow(df.raw)) * 100
#gan ti so phan tram da tinh dc vao cot 3 ("percentage") va lam tron gia tri con chu so thap phan
df.pho_diem_ngoai_ngu[, 3][i] = trunc(c * 10 ^ 4) / 10 ^ 4
}
#Xuat ra bang df.pho_diem_ngoai_ngu
return(df.pho_diem_ngoai_ngu)
}
## Ham nay dung de kiem tra cac gia tri missing trong cac cot diem
check_missing <- function(df.raw) {
#Tinh tong so cac gia tri N/A o cot "Dia", va tuong tu cho may cot "GDCD","Hoa",..., sau do gan vao cac bien
colSums(is.na(df.raw["Dia"])) -> dia
colSums(is.na(df.raw["GDCD"])) -> gdcd
colSums(is.na(df.raw["Hoa"])) -> hoa
colSums(is.na(df.raw["Li"])) -> li
colSums(is.na(df.raw["Ngoai_ngu"])) -> ngoaingu
colSums(is.na(df.raw["Sinh"])) -> sinh
colSums(is.na(df.raw["Su"])) -> su
colSums(is.na(df.raw["Toan"])) -> toan
colSums(is.na(df.raw["Van"])) -> van
#In cac bien ra man hinh de kiem tra
print(dia)
print(gdcd)
print(hoa)
print(li)
print(ngoaingu)
print(sinh)
print(su)
print(toan)
print(van)
}
# Ham nay dung de xu ly cac gia tri missing
handle_missing <- function(df.raw, value) {
#Gan cac gia tri bi missing bang gia tri 'Value'
df.raw["Dia"][is.na(df.raw["Dia"])] <- value
df.raw["GDCD"][is.na(df.raw["GDCD"])] <- value
df.raw["Hoa"][is.na(df.raw["Hoa"])] <- value
df.raw["Li"][is.na(df.raw["Li"])] <- value
df.raw["Ngoai_ngu"][is.na(df.raw["Ngoai_ngu"])] <- value
df.raw["Sinh"][is.na(df.raw["Sinh"])] <- value
df.raw["Su"][is.na(df.raw["Su"])] <- value
df.raw["Toan"][is.na(df.raw["Toan"])] <- value
df.raw["Van"][is.na(df.raw["Van"])] <- value
return(df.raw)
}
# Ham nay dung de tinh ra so thi sinh thi khoi KHTN va khoi KHXH
tu_nhien_vs_xa_hoi <- function(df) {
#Gan n = tong so hang
n = nrow(df.raw)
# khoi tao gia tri tn va xh =0
tn = 0
xh = 0
#Duyet qua tat ca cac hang
for (i in 1:n) {
#Neu hang nao co tong 3 mon KHXH = -3, tuong ung voi viec thi sinh do khong thi 3 mon nay, suy ra thi sinh do thi to hop 3 mon KHTN
if (df.raw$Dia[i] + df.raw$Su[i] + df.raw$GDCD[i] == -3) {
#Tang so thi sinh thi khoi KHTN len 1
tn = tn + 1
}
}
# Thi sinh thi KHXH bang tong so thi sinh tru di so thi sinh thi KHTN
xh = nrow(df.raw) - tn
# In so cac thi sinh thi KHXH va KHTN ra man hinh, lam tron toi 4 chu so thap phan
print(paste("So thi sinh thi khoi XH: ", xh, " chiem ", trunc(((
xh / n
) * 100) * 10 ^ 4) / 10 ^ 4))
print(paste("So thi sinh thi khoi TN: ", tn, " chiem ", trunc(((
tn / n
) * 100) * 10 ^ 4) / 10 ^ 4))
}
#Ham nay dung de gan ten tinh cho cac thi sinh giua tren Ma Tinh
gan_ten_tinh <- function(df) {
#Import bang ten tinh
df.tinh <-
read.csv(
link.dstinh
)
#Xoa cot dau tien cua bang ten tinh
df.tinh = select(df.tinh, -1)
#Ghep bang thi sinh voi bang ten tinh theo cot "Ma.Tinh"
df<-merge(x = df, y = df.tinh, by = "Ma.Tinh")
#Sap xep lai cot "Ma.Tinh" sau cot 14
df = df[c(2:13,1,14)]
return(df)
}
################################### End Function Island
#Khoi tao cac frame
df.raw = data.frame()
df.pho_diem_ngoai_ngu = data.frame()
df.thi_sinh_moi_tinh = data.frame()
df.thi_sinhvku_moi_tinh = data.frame()
df.trung_tuyen_vku = data.frame()
###################################
#import file dữ liệu
df.raw <-
read.csv(link.diemthi)
#Show thong tin chung cua frame
str(df.raw)
#Kiem tra cac gia tri diem thi bi thieu
check_missing(df.raw)
#Thay cac gia tri bi thieu bang -1
df.raw <- handle_missing(df.raw, -1)
#Kiem tra lai cac gia tri diem thi bi thieu
check_missing(df.raw)
### Gan du lieu cho frame pho diem ngoai ngu
df.pho_diem_ngoai_ngu = pho_diem_ngoai_ngu(df.raw)
#### Them cot Ma.Tinh bang cac gia tri -1
df.raw['Ma.Tinh'] <- -1
### Xoa 6 ki tu sau cua cot "sbd" va gan cho cot Ma.Tinh
df.raw$Ma.Tinh <- gsub('.{6}$', '', df.raw$sbd)
## Gan Ten tinh cho bang thi sinh
df.raw = gan_ten_tinh(df.raw)
tb.thi_sinh_moi_tinh <- table(df.raw[names(df.raw)=="Ten.Tinh"])
df.thi_sinh_moi_tinh <- as.data.frame(tb.thi_sinh_moi_tinh)
#### Xet VKU
df.raw['Khoi.Thi'] <- NA
df.raw$Khoi.Thi <-
ifelse(df.raw$Dia + df.raw$GDCD + df.raw$Su == -3, "TN", "XH")
df.raw = xet_vku_cntt(df.raw)
df.trung_tuyen_vku = filter(df.raw, Trung.Tuyen.VKU ==TRUE)
tb.thi_sinhvku_moi_tinh <- table(df.trung_tuyen_vku[names(df.trung_tuyen_vku)=="Ten.Tinh"])
df.thi_sinhvku_moi_tinh <- as.data.frame(tb.thi_sinhvku_moi_tinh)
######
tu_nhien_vs_xa_hoi(df.raw)
# View(df.raw)
# View(df.pho_diem_ngoai_ngu)
# View(df.thi_sinh_moi_tinh)
# View(df.thi_sinhvku_moi_tinh)
# View(df.trung_tuyen_vku)
